[82]
최대공약수를 재귀함수로 구현해보세요.

## 유클리드 알고리즘
주어진 두 수 사이에 존재하는 최대공약수(GCD(Greatest Common Divisor))를 구하는 알고리즘

1.두 수 m,n(m>n) 입력으로 들어온다.
2.n이 0이라면 m을 출력하고 알고리즘은 종료
3.m이 n으로 나누어 떨어지면, n을 출력하고 알고리즘은 종료
4.그렇지 않으면 원래의 n을 m에 넣고
  원래의 m을 원래의 n으로 나눈 나머지(m%n)를 n에 대입하고 3번으로 돌아간다.

# m>n = x>y라는 전제조건 => 스위칭 해주는 알고리즘도 넣어주기


[Answer]

# 최대공약수 구하는 함수(재귀함수 사용X)
def GCD(x,y):
	if (x<y):
		x,y = y,x	# 스위칭 해주는 것
	while(y!=0):		# y(=n)가 0이 될 때까지 while문 돌아감
		n=x%y		# 여기서 바로 "y=x%y,x=y"라고만 쓰지 않는 이유는 값이
				# 서로 연동되기 때문에 (n을 거쳐서) 한번 돌아가야함
		x=y;
		y=n;
	return x

GCD(24,18)

24%18 -> 나머지: 6, x=18, y=6 (18,6)
18%6 -> 나머지: 0, x=6, y=0 (6,0)

또는

# 재귀함수 사용O
def gcdFn(x,y):
	if y==0:
		return x
	return gcdFn(y,x%y)


    18%6 (6,0)
    24%18(18,6)
24  18%24(24,18)

gcdFn(18,24)
